tags: [ py3 ]

除法/：
除法运算的结果为浮点数，即便参与运算的除数和被除数都是整数。

整除//：
整除运算的结果可以为整数，也可以为浮点数。如果为浮点数的话，那么小数点后面为0。
如果运算的结果为正数的话，那么直接为整数或者小数点后面为0：
1 // 2
0
5.0 / 2.1
2.38095238
5.0 // 2.1
2.0
11.9 / 3.0
3.96666666
11.9 // 3.0
3.0
整除存在一个负数参与运算的情形：
-10 // 3
-4
10 // -3
-4
可以看到上面两个示例，如果是进行除法/运算的话，结果均为-3.333333333，而整除的结果并不是直接丢弃小数点后面的部分，而是在远离0的方向上取了一个整数-4为结果。

求模%：
求模运算的结果可以为整数，也可以为浮点数，可以是正数，也可以是负数。
比如：
10 % 3
1
2.75 % 0.5
0.25
-10 % 3
2
为什么结果为2？因为-10 // 3的结果为-4,而求模的结果就是整除//运算后剩下的部分，那么整除运算后剩下了多少？就需要看整除运算拿走了多少：-4 * 3 = -12，也就是拿走了-12,那么剩下多少：-10 - (-12) = 2
同样可以计算10 % -3结果为-2,因为10 // -3结果为-4,拿走了-4 * -3 = 12，剩下：10 - 12 = 2

表达式：
赋值语句不是表达式，比如x = 5，在交互式解释器中执行这条语句后，解释器并未给出表达式的值。
函数调用是表达式，比如pow(2,3)，在交互式解释器中执行这条语句后，解释器给出了表达式的值为8

input:
input函数的返回值类型为：str

字符串：
在python3中，所有的字符串都是unicode字符串，默认为utf-8
长字符串：
在长字符串里面可以自由的使用单引号和双引号，无论开头和结尾的3个引号是单还是双。
原始字符串：
在原始字符串里面不对反斜杠做转义处理，而是让每个字符都保持原样。注意：原始字符串的最后一个字符不能是反斜杠。
在指定原始字符串的时候，可以使用单引号，双引号，三引号。

unicode和bytes:
bytes对象是不可变的。之所以需要bytes是为了与C语言交互，将文本写入文件，将文本通过套接字发出去。可以直接创建bytes对象，方法是使用前缀b
将字符串转换为不同编码的bytes对象的方式：
"Hello, world!".encode("ASCII")
"Hello, world!".encode("UTF-8")
将bytes对象解码为utf-8字符串，注意：参数里面的字符编码大小写皆可：
b'Hello,world'.decode()
这里参数默认为utf-8
也可以不使用encode,decode方法而直接创建bytes,str:
bytes('静观自得',encoding = 'utf-8')
b'\xe9\x9d\x99\xe8\xa7\x82\xe8\x87\xaa\xe5\xbe\x97'
str(b'\xe9\x9d\x99\xe8\xa7\x82\xe8\x87\xaa\xe5\xbe\x97',encoding = 'utf-8')
'静观自得'
